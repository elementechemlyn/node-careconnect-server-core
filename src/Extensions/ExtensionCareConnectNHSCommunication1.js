// This code was autogenerated from BuildExtensions.py

const FHIRServer = require('../..')
const CareConnectBaseExtension = require('../BaseClasses/CareConnect-BaseExtension')

class ExtensionCareConnectNHSCommunication1 extends CareConnectBaseExtension {
  constructor (opt) {
    super(opt)
    opt && delete opt.resourceType
    Object.assign(this, opt)
    this.url = 'https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-NHSCommunication-1'
  }
  set language (value) {
    // let max = 1
    // let min = 1
    let ext = new CareConnectBaseExtension()
    ext.url = 'language'
    ext.valueCodeableConcept = value
    // TODO Check max/clear existing slice
    if (!this.__data.extension) {
      this.__data.extension = []
    }
    this.__data.extension.push(ext)
  }

  get language () {
    let ext = this.__data.extension.find(e => e.url === 'language')
    return ext && ext.valueCodeableConcept
  }
  set preferred (value) {
    // let max = 1
    // let min = None
    let ext = new CareConnectBaseExtension()
    ext.url = 'preferred'
    ext.valueBoolean = value
    // TODO Check max/clear existing slice
    if (!this.__data.extension) {
      this.__data.extension = []
    }
    this.__data.extension.push(ext)
  }

  get preferred () {
    let ext = this.__data.extension.find(e => e.url === 'preferred')
    return ext && ext.valueBoolean
  }
  set modeOfCommunication (value) {
    // let max = None
    // let min = None
    let ext = new CareConnectBaseExtension()
    ext.url = 'modeOfCommunication'
    ext.valueCodeableConcept = value
    // TODO Check max/clear existing slice
    if (!this.__data.extension) {
      this.__data.extension = []
    }
    this.__data.extension.push(ext)
  }

  get modeOfCommunication () {
    let ext = this.__data.extension.find(e => e.url === 'modeOfCommunication')
    return ext && ext.valueCodeableConcept
  }
  set communicationProficiency (value) {
    // let max = 1
    // let min = None
    let ext = new CareConnectBaseExtension()
    ext.url = 'communicationProficiency'
    ext.valueCodeableConcept = value
    // TODO Check max/clear existing slice
    if (!this.__data.extension) {
      this.__data.extension = []
    }
    this.__data.extension.push(ext)
  }

  get communicationProficiency () {
    let ext = this.__data.extension.find(e => e.url === 'communicationProficiency')
    return ext && ext.valueCodeableConcept
  }
  set interpreterRequired (value) {
    // let max = 1
    // let min = None
    let ext = new CareConnectBaseExtension()
    ext.url = 'interpreterRequired'
    ext.valueBoolean = value
    // TODO Check max/clear existing slice
    if (!this.__data.extension) {
      this.__data.extension = []
    }
    this.__data.extension.push(ext)
  }

  get interpreterRequired () {
    let ext = this.__data.extension.find(e => e.url === 'interpreterRequired')
    return ext && ext.valueBoolean
  }
}

module.exports = ExtensionCareConnectNHSCommunication1
