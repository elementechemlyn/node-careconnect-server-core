// This code was autogenerated from BuildExtensions.py

const FHIRServer = require('../..')
const CareConnectBaseExtension = require('../BaseClasses/CareConnect-BaseExtension')

class ExtensionCareConnectDataProcessor1 extends CareConnectBaseExtension {
  constructor (opt) {
    super(opt)
    opt && delete opt.resourceType
    Object.assign(this, opt)
    this.url = 'https://fhir.hl7.org.uk/STU3/StructureDefinition/Extension-CareConnect-DataProcessor-1'
  }
  set actorvalueReference (value) {
    // let max = 1
    // let min = 1
    let ext = new CareConnectBaseExtension()
    ext.url = 'actor'
    ext.valueReference = value
    // TODO Check max/clear existing slice
    if (!this.__data.extension) {
      this.__data.extension = []
    }
    this.__data.extension.push(ext)
  }

  get actorvalueReference () {
    let ext = this.__data.extension.find(e => e.url === 'actor')
    return ext && ext.valueReference
  }
  set periodvaluePeriod (value) {
    // let max = 1
    // let min = None
    let ext = new CareConnectBaseExtension()
    ext.url = 'period'
    ext.valuePeriod = value
    // TODO Check max/clear existing slice
    if (!this.__data.extension) {
      this.__data.extension = []
    }
    this.__data.extension.push(ext)
  }

  get periodvaluePeriod () {
    let ext = this.__data.extension.find(e => e.url === 'period')
    return ext && ext.valuePeriod
  }
  set basisvalueCoding (value) {
    // let max = 1
    // let min = None
    let ext = new CareConnectBaseExtension()
    ext.url = 'basis'
    ext.valueCoding = value
    // TODO Check max/clear existing slice
    if (!this.__data.extension) {
      this.__data.extension = []
    }
    this.__data.extension.push(ext)
  }

  get basisvalueCoding () {
    let ext = this.__data.extension.find(e => e.url === 'basis')
    return ext && ext.valueCoding
  }
}

module.exports = ExtensionCareConnectDataProcessor1
